{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onClickCallback","id","value","Board","squareList","squares","row","obj","push","generateSquareComponents","PLAYER_1","PLAYER_2","generateSquares","currentId","col","App","useState","setSquares","player","setPlayer","winner","setWinner","checkForWinner","every","squareCopy","numSquaresFilled","newWinner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0831a8ff.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n  const onButtonClick = () => {\n    props.onClickCallback(props.id);\n  };\n\n  return <button\n    className=\"square\"\n    onClick={onButtonClick}\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  const squareList = [];\n  \n  for (let row of squares) {\n    for (let obj of row) {\n      squareList.push(<Square key={obj.id} value={obj.value} id={obj.id} onClickCallback={onClickCallback}/>)\n    }\n  }\n  \n  return squareList;\n}\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  return <div className=\"grid\">\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n\n  // This starts state off as a 2D array of JS objects with\n  // empty value and unique ids.\n  const [squares, setSquares] = useState(generateSquares());\n  const [player, setPlayer] = useState(PLAYER_1);\n  const [winner, setWinner] = useState(false);\n\n  const updateSquares = (id) => {\n    const squareCopy = [];\n    let numSquaresFilled = 0;\n    let currentId = 0;\n    for (let row = 0; row < 3; row += 1) {\n      squareCopy.push([]);\n      for (let col = 0; col < 3; col += 1) {\n        if (winner === false && currentId === id && squares[row][col].value === '') {\n          squareCopy[row].push({\n            id: currentId,\n            value: player,\n          });\n\n          if (player === PLAYER_1) {\n            setPlayer(PLAYER_2)\n          } else {\n            setPlayer(PLAYER_1)\n          }\n\n        } else {\n          squareCopy[row].push(squares[row][col]);\n        }\n\n        if (squareCopy[row][col].value !== '') {\n          numSquaresFilled++;\n        }\n        \n        currentId += 1;\n      }\n    }\n    \n    setSquares(squareCopy);\n    let newWinner = checkForWinner(squareCopy);\n    if (numSquaresFilled === 9) {\n      setWinner('tie');\n    } else if (newWinner !== false) {\n      setWinner(newWinner);\n    }\n  }\n\n  const checkForWinner = (squares) => {\n    // First check rows:\n    for (let row of squares) {\n      if (row.every(obj => obj.value ==='X')) {\n        return PLAYER_1;\n      } else if (row.every(obj => obj.value ==='O')) {\n        return PLAYER_2;\n      }\n    }\n\n    // Check cols:\n    for (let col = 0; col < 3; col += 1) {\n      if (squares[0][col].value === 'X' && \n          squares[0][col].value === squares[1][col].value && \n          squares[1][col].value === squares[2][col].value) {\n        return PLAYER_1;\n      } else if (squares[0][col].value === 'O' && \n      squares[0][col].value === squares[1][col].value && \n      squares[1][col].value === squares[2][col].value) {\n        return PLAYER_2;\n      }\n    }\n\n    // Check diagonals:\n    if (squares[0][0].value === 'X' && \n        squares[0][0].value === squares[1][1].value && \n        squares[1][1].value === squares[2][2].value) {\n      return PLAYER_1;\n    } else if (squares[0][0].value === 'O' && \n               squares[0][0].value === squares[1][1].value && \n               squares[1][1].value === squares[2][2].value) {\n      return PLAYER_2;\n    } else if (squares[0][2].value === 'X' && \n               squares[0][2].value === squares[1][1].value && \n               squares[1][1].value === squares[2][0].value) {\n      return PLAYER_1;\n    } else if (squares[0][2].value === 'O' && \n               squares[0][2].value === squares[1][1].value && \n               squares[1][1].value === squares[2][0].value) {\n      return PLAYER_2;\n    }\n\n    return false;\n  }\n\n  const resetGame = () => {\n    setSquares(generateSquares())\n    setPlayer(PLAYER_1)\n    setWinner(false)\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{winner === false ? '' : winner === 'tie' ? 'It is a tie!' : `Winner is ${winner}`}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={updateSquares} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}